void cancelPrevious() {
    stage("Cancelling previous") {
        def buildNumber = env.BUILD_NUMBER as int
        if (buildNumber > 1) milestone(buildNumber - 1)
        milestone(buildNumber)
    }
}

String getTempFolder(String nodeName) {
    if (nodeName=="Windows") { return "D:/J/t/" }
    return "/tmp/"
}

List<Map> getConfigurations(String moduleName, String branchName, String jobName) {
    // TODO: handle revision cases
    def configs = []
    if (branchName =~ /(^PR-.*)/) {
        configs.add([node: "Linux", pyvers: ["PY36"]])
        if (moduleName=="conans/test/functional") {
            configs.add([node: "Windows", pyvers: ["PY36"]])
            configs.add([node: "Macos", pyvers: ["PY36"]])
        }
    }
    else if (jobName == "ConanNightly") {
        configs.add([node: "Linux", pyvers: ["PY36", "PY39"]])
        configs.add([node: "Windows", pyvers: ["PY36", "PY39"]])
        configs.add([node: "Macos", pyvers: ["PY36", "PY39"]])
    }
    else if (branchName =~ /(^release.*)|(^develop2)/) {
        if (moduleName=="conans/test/functional") {
            configs.add([node: "Linux", pyvers: ["PY36"]])
            configs.add([node: "Windows", pyvers: ["PY36"]])
            configs.add([node: "Macos", pyvers: ["PY36"]])
        }
        else {
            configs.add([node: "Linux", pyvers: ["PY36", "PY39"]])
            configs.add([node: "Windows", pyvers: ["PY36", "PY39"]])
            configs.add([node: "Macos", pyvers: ["PY36", "PY39"]])
        }
    }
    return configs
}

String getDockerImage(String moduleName) {
    if (moduleName=="conans/test/unittests" || moduleName=="conans/test/integration") {
        return "conanio/ci-unittests"
    }
    else if (moduleName=="conans/test/functional"){
        return "conanio/ci-functional"
    }
    return ""
}

// call to pytest for different nodes
private Closure runTests(String nodeName, String pythonVersion, String module) {
    def ret = {
        node(nodeName) {
            stage("${nodeName} - ${pythonVersion}") {
                def scmVars = checkout scm
                print(scmVars)
                def commit = scmVars["GIT_COMMIT"].substring(0, 4)
                if (nodeName=="Linux") {
                    try {
                        def dockerImage = getDockerImage(module)
                        echo "Docker Image: $dockerImage"
                        sh("docker pull ${dockerImage}:latest")
                        docker.image(dockerImage).inside("--entrypoint= -e PYENV_ROOT=/home/conan/.pyenv") {
                            sh(script: "pyenv global \$${pythonVersion}")
                            sh(script: "python --version")
                        }
                    }
                    finally {}
                }
                else if (nodeName=="Macos") {
                    try {
                        sh(script: "pwd && ls")
                        sh(script: "touch mockfile.txt")
                        sh(script: "pwd && ls")
                    }
                    finally {}
                }
                else if (nodeName=="Windows") {
                    try {
                        bat(script: "cd && dir")
                    }
                    finally {}
                }
                cleanWs()
            }
        }
    }
    return ret
}

void runTestsModule(String moduleName, String branchName, String jobName) {
    def configs = getConfigurations(moduleName, branchName, jobName)
    def paralellRuns = [:]
    configs.each { config ->
        def testKind = moduleName.split("/").last()
        config["pyvers"].each { pyver ->
            paralellRuns["${testKind} - ${config['node']} - ${pyver}"] = runTests(config["node"], pyver, moduleName)
        }
    }
    parallel(paralellRuns)
}

def testModules = ["conans/test/unittests", "conans/test/integration", "conans/test/functional"]

try {
    node("Linux") {
        sh(script: "printenv")
    }
    cancelPrevious()
    def branchName = env.BRANCH_NAME
    def jobName = env.JOB_NAME

    testModules.each { moduleName -> 
        runTestsModule(moduleName, branchName, jobName)
    }

}
catch(e){
    echo "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    throw e
}
