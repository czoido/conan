
void cancelPrevious() {
    stage("Cancelling previous") {
        def buildNumber = env.BUILD_NUMBER as int
        if (buildNumber > 1) milestone(buildNumber - 1)
        milestone(buildNumber)
    }
}

List<Map> getConfigurations(String branchName, String jobName) {
    def configs = []
    if (branchName =~ /(^PR-.*)/) {
        configs.add([name: "Linux", pyvers: ["py36"]])
    }
    else if (branchName =~ /(^release.*)|(^develop2)/ || jobName == "ConanNightly") {
        configs.add([name: "Linux", pyvers: ["py36", "py38"]])
        configs.add([name: "Windows", pyvers: ["py36", "py38"]])
        configs.add([name: "Macos", pyvers: ["py36", "py38"]])
    }
    return configs
}

String getDockerImage(String testModule) {
    if (testModule.indexOf("unittests")!=-1 || testModule.indexOf("integration")!=-1) {
        return "conanio/ci-unittests"
    }
    else if (testModule.indexOf("functional")!=-1){
        return "conanio/ci-functional"
    }
    return ""
}

// call to pytest for different nodes
private Closure runTests(String stageLabel, String nodeName, List<String> pyvers, String module) {
    return {
        node(nodeName) {
            stage(stageLabel) {
                if (nodeName=="Linux") {
                    def dockerImage = getDockerImage(module)
                    echo "Docker Image: $dockerImage"
                    docker.image(dockerImage).inside("--entrypoint=") {
                        echo "$module, $pyvers"
                    }
                }
                else if (nodeName=="Macos") {
                    echo "$module, $pyvers"
                }
                else if (nodeName=="Windows") {
                    echo "$module, $pyvers"
                }
            }
        }
    }
}

void runUnitAndIntegrationTests(List<Map> configs) {
    echo "runUnitAndIntegrationTests"
    def paralellRuns = [:]
    configs.each { config ->
        paralellRuns[config["name"]] = runTests("Unit", config["name"], config["pyvers"], "conans/test/unittests")
    }
    parallel(paralellRuns)
    paralellRuns = [:]
    configs.each { config ->
        paralellRuns[config["name"]] = runTests("Integration", config["name"], config["pyvers"], "conans/test/integration")
    }
    parallel(paralellRuns)
}

void runFunctionalTestsDefault(List<Map> configs) {
    echo "runFunctionalTestsDefault"
    def paralellRuns = [:]
    configs.each { config ->
        paralellRuns[config["name"]] = runTests("Functional", config["name"], config["pyvers"], "conans/test/functional")
    }
    parallel(paralellRuns)
}

void runFunctionalTestsVariants(List<Map> configs) {
    echo "runFunctionalTestsWithVariants"
    def paralellRuns = [:]
    configs.each { config ->
        paralellRuns[config["name"]] = runTests("Functional", config["name"], config["pyvers"], "conans/test/functional")
    }
    parallel(paralellRuns)
}

try {
    node("Linux") {
        sh(script: "printenv")
    }
    cancelPrevious()
    def branchName = env.BRANCH_NAME
    def jobName = env.JOB_NAME
    def configs = getConfigurations(branchName, jobName)

    runUnitAndIntegrationTests(configs)
    runFunctionalTestsDefault(configs)
    runFunctionalTestsVariants(configs)
}
catch(e){
    echo "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    throw e
}
