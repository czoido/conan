name: Windows Tests

on:
  push:
    branches:
      - develop2
      - release/*
      - frm/win_gh_actions-3
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  testing:
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9']
        test-type: [functional]

    runs-on: windows-2022

    name: Conan (${{ matrix.test-type }}) (${{ matrix.python-version }})

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Visual Studio Installer
        uses: actions/cache@v4
        with:
            path: D:\VS2017Cache\vs_community.exe
            key: vs2017-installer-${{ runner.os }}-v1

      - name: Install Visual Studio 2017 Community Edition
        if: matrix.test-type == 'functional'
        run: |
            $Components = @(
            'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
            'Microsoft.VisualStudio.Component.Windows81SDK',
            'Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core',
            'Microsoft.Component.MSBuild',
            'Microsoft.VisualStudio.Component.VC.CMake.Project',
            'Microsoft.VisualStudio.Workload.NativeDesktop',
            'Microsoft.VisualStudio.Component.VC.CoreBuildTools',
            'Microsoft.VisualStudio.Component.VC.ATLMFC'
            )
            $InstallerPath = 'D:\VS2017Cache\vs_community.exe'

            if (!(Test-Path $InstallerPath)) {
            Write-Host "Descargando el instalador de Visual Studio..."
            Invoke-WebRequest -Uri "https://aka.ms/vs/15/release/vs_community.exe" -OutFile $InstallerPath
            }

            Write-Host "Iniciando la instalaciÃ³n de Visual Studio..."
            $Arguments = @(
            "--quiet", "--wait", "--norestart", "--nocache",
            "--noUpdateInstaller",
            "--includeRecommended",
            "--includeOptional"
            )

            foreach ($component in $Components) {
            $Arguments += "--add"
            $Arguments += $component
            }

            Start-Process -FilePath $InstallerPath -ArgumentList $Arguments -Wait

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\cache
          key: pip-packages-${{ runner.os }}-${{ hashFiles('conans/requirements*.txt') }}
          restore-keys: |
            pip-packages-${{ runner.os }}-

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_dev.txt
          pip install meson

      - name: Cache Chocolatey Package Cache
        uses: actions/cache@v4
        with:
            path: C:\ProgramData\chocolatey\cache
            key: choco-cache-${{ runner.os }}-v1
            restore-keys: |
              choco-cache-${{ runner.os }}-

      - name: Install Chocolatey packages
        if: matrix.test-type == 'functional'
        run: |
          choco install pkgconfiglite --version 0.28
          choco install ninja --version 1.10.2
          choco install mingw
          choco install cygwin
          choco install cyg-get
          choco info cygwin
          cyg-get automake gcc-g++ make binutils

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: false
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-i686-toolchain
            base-devel
            gcc
            autoconf-wrapper
            automake

      - name: Cache CMake and Bazel installations
        if: matrix.test-type == 'functional'
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            C:\tools\cmake\3.15.7
            C:\tools\cmake\3.19.7
            C:\tools\cmake\3.23.5
            C:\tools\bazel\6.3.2
            C:\tools\bazel\7.1.2
          key: ${{ runner.os }}-conan-tools-cache-v1

      - name: Build older versions of CMake
        if: steps.cache-tools.outputs.cache-hit != 'true' && matrix.test-type == 'functional'
        run: |
          $CMAKE_OLD_VERSIONS = @("3.15.7", "3.19.7")
          foreach ($version in $CMAKE_OLD_VERSIONS) {
            Write-Host "Downloading CMake version $version for Windows..."
            $destination = "C:\tools\cmake\$version"
            if (-not (Test-Path $destination)) {
              New-Item -Path $destination -ItemType Directory
            }
            # Las versiones anteriores usan 'win64-x64' en la URL
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-win64-x64.zip"
            $zipFile = "cmake-$version-win64-x64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }

      - name: Install modern versions of CMake
        if: steps.cache-tools.outputs.cache-hit != 'true' && matrix.test-type == 'functional'
        run: |
          $CMAKE_NEW_VERSIONS = @("3.23.5")
          foreach ($version in $CMAKE_NEW_VERSIONS) {
            Write-Host "Downloading CMake version $version for Windows..."
            $destination = "C:\tools\cmake\$version"
            if (-not (Test-Path $destination)) {
              New-Item -Path $destination -ItemType Directory
            }
            # Las versiones modernas usan 'windows-x86_64' en la URL
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-windows-x86_64.zip"
            $zipFile = "cmake-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }

      - name: Install Bazel versions
        if: steps.cache-tools.outputs.cache-hit != 'true' && matrix.test-type == 'functional'
        run: |
          $BAZEL_VERSIONS = @("6.3.2", "7.1.2")
          foreach ($version in $BAZEL_VERSIONS) {
            Write-Host "Downloading Bazel version $version for Windows..."
            $destination = "C:\tools\bazel\$version"
            if (-not (Test-Path $destination)) {
              New-Item -Path $destination -ItemType Directory
            }
            $url = "https://github.com/bazelbuild/bazel/releases/download/$version/bazel-$version-windows-x86_64.zip"
            $zipFile = "bazel-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }

      - name: Run Tests
        run: |
          $shortGuid = [System.Guid]::NewGuid().ToString().Substring(0, 4)
          $randomFolder = [System.IO.Path]::Combine("D:\\", "tmp_tests", $shortGuid)
          New-Item -ItemType Directory -Force -Path $randomFolder
          $env:CONAN_TEST_FOLDER = $randomFolder
          $matrixTestType = "${{ matrix.test-type }}"
          if ($matrixTestType -eq "unittests") {
              pytest test/unittests --durations=20 --numprocesses=auto
          } elseif ($matrixTestType -eq "integration") {
              pytest test/integration --durations=20 --numprocesses=auto
          } elseif ($matrixTestType -eq "functional") {
              $env:Path = "C:\tools\cmake\3.15.7\cmake-3.15.7-win64-x64\bin;" + $env:Path
              Remove-Item 'C:\Strawberry' -Recurse
              pytest test/functional --durations=20 --numprocesses=auto
          }
