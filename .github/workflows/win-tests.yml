name: Windows Tests

on:
  push:
    branches:
      - develop2
      - release/*
      - frm/win_gh_actions-3
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  testing:
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9']
        test-type: [functional]

    runs-on: windows-2022

    name: Conan (${{ matrix.test-type }}) (${{ matrix.python-version }})

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Visual Studio Installer
        uses: actions/cache@v4
        with:
          path: D:\VS2017Cache
          key: vs2017cache-${{ runner.os }}-cpp-components-v1

      - name: Install Visual Studio from Cache
        if: matrix.test-type == 'functional'
        run: |
          $Components = @(
            'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
            'Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core',
            'Microsoft.VisualStudio.Component.VC.CoreBuildTools'
          )
          $CachePath = 'D:\VS2017Cache'

          if (!(Test-Path $CachePath)) {
            New-Item -ItemType Directory -Path $CachePath | Out-Null
          }

          if (!(Test-Path "$CachePath\vs_community.exe")) {
            Invoke-WebRequest -Uri "https://aka.ms/vs/15/release/vs_community.exe" -OutFile "$CachePath\vs_community.exe"
            & "$CachePath\vs_community.exe" --layout $CachePath --add $Components --lang en-US
          }
          & "$CachePath\vs_community.exe" --noweb --quiet --wait --norestart --add $Components

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\cache
          key: pip-packages-${{ runner.os }}-${{ hashFiles('conans/requirements*.txt') }}
          restore-keys: |
            pip-packages-${{ runner.os }}-

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_dev.txt
          pip install meson

      - name: Install Chocolatey packages
        if: matrix.test-type == 'functional'
        run: |
          choco install pkgconfiglite --version 0.28
          choco install ninja --version 1.10.2
          choco install mingw
          choco install cygwin
          choco install cyg-get
          choco info cygwin
          cyg-get automake gcc-g++ make binutils
          dir "C:/tools/cygwin/bin"
          dir "C:/ProgramData/Chocolatey/bin"

          $env:Path += ";C:\tools\cygwin\bin"

          $makePath = (Get-Command make | Select-Object -ExpandProperty Definition)
          Write-Host "make found in: $makePath"

          Write-Host "results 'where make':"
          where make

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: false
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-i686-toolchain
            base-devel
            gcc
            autoconf-wrapper
            automake

      - name: Cache CMake and Bazel installations
        if: matrix.test-type == 'functional'
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            C:\tools\cmake
            C:\tools\bazel
          key: ${{ runner.os }}-conan-tools-cache-v1

      - name: Build CMake versions
        if: steps.cache-tools.outputs.cache-hit != 'true' && matrix.test-type == 'functional'
        run: |
          $CMAKE_BUILD_VERSIONS = "3.15.7", "3.19.7", "3.23.5"
          foreach ($version in $CMAKE_BUILD_VERSIONS) {
            Write-Host "Downloading CMake version $version for Windows..."
            $destination = "C:\tools\cmake\$version"
            if (-not (Test-Path $destination)) {
              New-Item -Path $destination -ItemType Directory
            }
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-windows-x86_64.zip"
            $zipFile = "cmake-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }

      - name: Install Bazel versions
        if: steps.cache-tools.outputs.cache-hit != 'true' && matrix.test-type == 'functional'
        run: |
          $BAZEL_BUILD_VERSIONS = "6.3.2", "7.1.2"
          foreach ($version in $BAZEL_BUILD_VERSIONS) {
            Write-Host "Downloading Bazel version $version for Windows..."
            $destination = "C:\tools\bazel\$version"
            if (-not (Test-Path $destination)) {
              New-Item -Path $destination -ItemType Directory
            }
            $url = "https://github.com/bazelbuild/bazel/releases/download/$version/bazel-$version-windows-x86_64.zip"
            $zipFile = "bazel-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }

    #   - name: Run Tests
    #     run: |
    #       $shortGuid = [System.Guid]::NewGuid().ToString().Substring(0, 4)
    #       $randomFolder = [System.IO.Path]::Combine("D:\\", "tmp_tests", $shortGuid)
    #       New-Item -ItemType Directory -Force -Path $randomFolder
    #       $env:CONAN_TEST_FOLDER = $randomFolder
    #       $env:Path = "C:\tools\cmake\3.15.7\cmake-3.15.7-win64-x64\bin;" + $env:Path

    #       Set-Location $env:GITHUB_WORKSPACE
    #       Write-Host "Current folder: $(Get-Location)"

    #       $testPaths = @(
    #         'test/functional/toolchains/gnu/autotools/test_basic.py::test_autotoolsdeps_cygwin',
    #         'test/functional/subsystems_build_test.py::TestSubsystems::test_cygwin_available',
    #         'test/functional/subsystems_build_test.py::TestSubsystemsBuild::test_cygwin[True]',
    #         'test/functional/subsystems_build_test.py::TestSubsystemsBuild::test_cygwin[False]',
    #         'test/functional/subsystems_build_test.py::TestSubsystemsAutotoolsBuild::test_cygwin',
    #         'test/functional/subsystems_build_test.py::TestSubsystemsCMakeBuild::test_cygwin'
    #       )

    #       pytest @testPaths -vvv --durations=20 --numprocesses=auto
